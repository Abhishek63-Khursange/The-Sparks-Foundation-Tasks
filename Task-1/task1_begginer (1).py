# -*- coding: utf-8 -*-
"""Task1_Begginer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q1rd4UTucTG12myRPYhamTlNq5Xtbg0T

Author : Abhishek Khursange

GRIP : The Sparks Foundation

Role : Data Science & Business Analytics intern

Duration: April 2023 (Batch)

**Task 1 : Predict the percentage of a student based on the no. of study hours.**

Prediction using Supervised ML:
(level Beginner)

Dataset Url: 'https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv'

Predicted score if a student studies for 9.25 hrs/ day = 93.69173248737539
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt  
# %matplotlib inline

url='https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv'
s_data = pd.read_csv(url)
print("Data imported successfully")

cdf = s_data[['Hours','Scores']]
cdf.head()

"""**Step 2: Visualizing Data**"""

plt.scatter(cdf.Hours, cdf.Scores,  color='blue')
plt.xlabel("Hours Studied")
plt.ylabel("Sore obtained")
plt.title("Hours vs Scores")
plt.show()

"""**Step 3: Spliting the data into training and testing**"""

X = s_data.iloc[:, :-1].values  
y = s_data.iloc[:, 1].values

from sklearn.model_selection import train_test_split  
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                            test_size=0.2, random_state=0)

"""**Step 4: Training the Model**"""

from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(X_train, y_train) 

print("Training complete.")

"""**Step 5: Plotting the predicted line**"""

# Plotting the regression line
line = regressor.coef_*X+regressor.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line);
plt.show()

"""**Step 6: Making predictions**"""

print(X_test) # Testing data - In Hours
y_pred = regressor.predict(X_test) # Predicting the scores

"""**Step 7: Comparing Actual and Predicted Values**"""

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df

"""**Step 8: Evaluating the Model**"""

from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, y_pred))

"""**What will be predicted score if a student study for 9.25 hrs in a day?**"""

# You can also test with your own data
hours = 9.25
own_pred = regressor.predict([[hours]])
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))